/**
 * CodeService.js
 * Service x·ª≠ l√Ω c√°c thao t√°c li√™n quan ƒë·∫øn code qu√† t·∫∑ng
 */

import { getGameDataInstance } from "../core/GameData.js";
import { getGameManagerInstance } from "../core/GameManager.js";
import { Code } from "../models/Code.js";
import Player from "../models/Player.js";
import { getServiceRegistry } from "./ServiceRegistry.js";
import { PlayerService } from "./PlayerService.js";
import { getCodeRepositoryInstance } from "../repositories/CodeRepository.js";

export class CodeService {
  constructor() {
    /** @type {import('../core/GameData.js').GameData} */
    this.gameData = getGameDataInstance();

    /** @type {import('../core/GameManager.js').GameManager} */
    this.gameManager = getGameManagerInstance();

    // L·∫•y registry ƒë·ªÉ truy c·∫≠p c√°c service khi c·∫ßn
    this._registry = getServiceRegistry();

    // Code repository
    /** @type {import('../repositories/CodeRepository.js').CodeRepository} */
    this.codeRepository = getCodeRepositoryInstance();

    this.codes = [];
    this.codesById = new Map();
  }

  /**
   * L·∫•y m·ªôt service t·ª´ registry
   * @param {string} serviceName - T√™n service
   * @returns {Object} Service instance
   */
  getService = (serviceName) => this._registry.getService(serviceName);

  /**
   * L·∫•y PlayerService
   * @returns {PlayerService}
   */
  get playerService() {
    return this.getService("PlayerService");
  }

  /**
   * T·∫£i d·ªØ li·ªáu code t·ª´ database
   */
  async loadCodes() {
    try {
      this.codes = await this.codeRepository.getAllCodes();

      // T·∫°o map l∆∞u tr·ªØ code theo ID ƒë·ªÉ t√¨m ki·∫øm nhanh
      this.codesById.clear();
      for (const code of this.codes) {
        this.codesById.set(code.getId(), code);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i codes t·ª´ database:", error);
      this.codes = [];
    }

    return this.codes;
  }

  /**
   * T√¨m code theo ID
   * @param {string} id - ID c·ªßa code
   * @returns {Promise<Code|null>} - ƒê·ªëi t∆∞·ª£ng code ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  async getCodeById(id) {
    if (!id) return null;

    if (this.codesById.size === 0) {
      await this.loadCodes();
    }

    return this.codesById.get(id) || null;
  }

  /**
   * T√¨m code theo m√£ code
   * @param {string} code - M√£ code
   * @returns {Promise<Code>} - ƒê·ªëi t∆∞·ª£ng code ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  async getCodeByCode(code) {
    if (!code) return null;

    if (this.codes.length === 0) {
      await this.loadCodes();
    }

    return this.codes.find((c) => c.code === code) || null;
  }

  /**
   * T·∫°o code m·ªõi
   * @param {Object} codeData - D·ªØ li·ªáu code
   * @returns {Promise<Object>} - K·∫øt qu·∫£ t·∫°o code
   */
  async createCode(codeData) {
    const existingCode = await this.getCodeByCode(codeData.code);
    if (existingCode) {
      return {
        success: false,
        message: "‚ùå M√£ code ƒë√£ t·ªìn t·∫°i!",
      };
    }

    const code = new Code({
      id: `code_${Date.now()}`,
      ...codeData,
      createdAt: Date.now(),
    });

    // L∆∞u code v√†o database
    const success = await this.codeRepository.createCode(codeData);
    if (!success) {
      return {
        success: false,
        message: "‚ùå L·ªói khi l∆∞u code v√†o database!",
      };
    }

    // C·∫≠p nh·∫≠t danh s√°ch code trong b·ªô nh·ªõ
    await this.loadCodes();

    return {
      success: true,
      message: `‚úÖ ƒê√£ t·∫°o code "${code.code}" th√†nh c√¥ng!`,
    };
  }

  /**
   * X√≥a code
   * @param {string} codeId - ID c·ªßa code
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x√≥a code
   */
  async deleteCode(codeId) {
    const code = await this.getCodeById(codeId);
    if (!code) {
      return {
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y code!",
      };
    }

    // X√≥a code t·ª´ database
    const success = await this.codeRepository.deleteCode(codeId);
    if (!success) {
      return {
        success: false,
        message: "‚ùå L·ªói khi x√≥a code t·ª´ database!",
      };
    }

    // C·∫≠p nh·∫≠t danh s√°ch code trong b·ªô nh·ªõ
    await this.loadCodes();

    return {
      success: true,
      message: `‚úÖ ƒê√£ x√≥a code "${code.code}"!`,
    };
  }

  /**
   * L·∫•y danh s√°ch codes kh·∫£ d·ª•ng
   * @returns {Promise<Array>} - Danh s√°ch codes
   */
  async getAvailableCodes() {
    if (this.codes.length === 0) {
      await this.loadCodes();
    }

    const availableCodes = [];
    const currentTime = Date.now();

    for (const code of this.codes) {
      if (code.isActive && (!code.expireDate || currentTime <= code.expireDate)) {
        availableCodes.push({
          code: code.code,
          name: code.name,
          description: code.description,
        });
      }
    }

    return availableCodes;
  }

  /**
   * X·ª≠ l√Ω l·ªánh code v·ªõi c√°c tham s·ªë
   * @param {Player} player - ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i
   * @param {string} commandString - Chu·ªói l·ªánh ƒë·∫ßy ƒë·ªß
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω l·ªánh
   */
  async handleCode(player, commandString) {
    if (!player.redeemedCodes) {
      player.redeemedCodes = [];
    }

    const args = commandString
      .trim()
      .split(/\s+/)
      .filter((arg) => arg.length > 0);

    // N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    if (args.length === 0) {
      let message =
        "üéÅ H·ªÜ TH·ªêNG M√É QU√Ä T·∫∂NG:\n\n" +
        "- Nh·∫≠p `code list` ƒë·ªÉ xem danh s√°ch m√£ hi·ªán c√≥\n" +
        "- Nh·∫≠p `code [m√£]` ƒë·ªÉ ƒë·ªïi qu√† t·ª´ m√£\n\n" +
        "üìù L∆∞u √Ω: M·ªói m√£ ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn, m·ªôt s·ªë m√£ c√≥ th·ªÉ c√≥ h·∫°n s·ª≠ d·ª•ng.\n" +
        "C√°c m√£ qu√† t·∫∑ng c√≥ th·ªÉ cung c·∫•p nhi·ªÅu ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n nh∆∞ v√†ng, kinh nghi·ªám, v·∫≠t ph·∫©m, v.v.";

      // Th√™m h∆∞·ªõng d·∫´n cho admin
      if (player.isAdmin) {
        message +=
          "\n\nüëë L·ªÜNH D√ÄNH CHO QU·∫¢N TR·ªä VI√äN:\n" +
          "- `code create [id] [name] [description] [maxUses] [gold] [exp]`: T·∫°o m√£ m·ªõi\n" +
          "- `code delete [id]`: X√≥a m√£ code";
      }

      return {
        success: true,
        message: message,
      };
    }

    const action = args[0].toLowerCase();

    // Hi·ªÉn th·ªã danh s√°ch codes
    if (action === "list") {
      const availableCodes = await this.getAvailableCodes();

      if (availableCodes.length === 0) {
        return {
          success: true,
          message: "üìã Hi·ªán kh√¥ng c√≥ m√£ qu√† t·∫∑ng n√†o kh·∫£ d·ª•ng.",
        };
      }

      let message = "üìã DANH S√ÅCH M√É QU√Ä T·∫∂NG KH·∫¢ D·ª§NG:\n\n";
      availableCodes.forEach((code) => {
        const used = player.redeemedCodes.includes(code.code) ? "‚úÖ ƒê√£ s·ª≠ d·ª•ng" : "‚¨ú Ch∆∞a s·ª≠ d·ª•ng";
        message += `üì¶ ${code.code}: ${code.name}\n`;
        message += `   üìù ${code.description}\n`;
        message += `   üéØ Tr·∫°ng th√°i: ${used}\n\n`;
      });

      message += "üí° S·ª≠ d·ª•ng l·ªánh `code [m√£]` ƒë·ªÉ nh·∫≠n qu√† t·ª´ m√£.";

      return {
        success: true,
        message: message,
      };
    }

    // T·∫°o code m·ªõi (ch·ªâ admin)
    if (action === "create") {
      if (!player.isAdmin) {
        return {
          success: false,
          message: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
        };
      }

      if (args.length < 6) {
        return {
          success: false,
          message:
            "üìù C√∫ ph√°p: `code create [id] [name] [description] [maxUses] [gold] [exp]`\n" +
            'V√≠ d·ª•: `code create WELCOME2025 "Ch√†o m·ª´ng" "M√£ ch√†o m·ª´ng nƒÉm 2025" 100 1000 500`',
        };
      }

      const codeId = args[1];
      const codeName = args[2].replace(/"/g, "");
      const codeDesc = args[3].replace(/"/g, "");
      const maxUses = parseInt(args[4]) || -1;
      const gold = parseInt(args[5]) || 0;
      const exp = parseInt(args[6]) || 0;

      const result = await this.createCode({
        code: codeId,
        name: codeName,
        description: codeDesc,
        maxUses: maxUses,
        rewards: {
          gold: gold,
          exp: exp,
          items: [],
        },
      });

      return result;
    }

    // X√≥a code (ch·ªâ admin)
    if (action === "delete") {
      if (!player.isAdmin) {
        return {
          success: false,
          message: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
        };
      }

      if (args.length < 2) {
        return {
          success: false,
          message: "üìù C√∫ ph√°p: `code delete [id]`",
        };
      }

      const codeToDelete = await this.getCodeByCode(args[1]);
      if (!codeToDelete) {
        return {
          success: false,
          message: "‚ùå Kh√¥ng t√¨m th·∫•y code!",
        };
      }

      const result = await this.deleteCode(codeToDelete.getId());
      return result;
    }

    // S·ª≠ d·ª•ng code
    const codeString = args[0];
    return await this.useCode(player, codeString);
  }

  /**
   * S·ª≠ d·ª•ng code
   * @param {Player} player - ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i
   * @param {string} codeString - M√£ code
   * @returns {Promise<Object>} - K·∫øt qu·∫£ s·ª≠ d·ª•ng code
   */
  async useCode(player, codeString) {
    const codeRaw = String(codeString || "").trim();
    if (!codeRaw) {
      return { success: false, message: "‚ùå Vui l√≤ng nh·∫≠p m√£ code!" };
    }

    const code = await this.getCodeByCode(codeRaw);
    if (!code) {
      return { success: false, message: "‚ùå Kh√¥ng t√¨m th·∫•y m√£ code n√†y." };
    }

    const playerLevel = Number(player?.realm?.getLevel() || 1);
    const can = code.canUse(player.getGlobalId(), playerLevel);
    if (!can.canUse) {
      return { success: false, message: `‚ùå ${can.reason}` };
    }

    if (Array.isArray(player.redeemedCodes) && player.redeemedCodes.includes(code.code)) {
      return { success: false, message: "‚ùå B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ n√†y tr∆∞·ªõc ƒë√≥." };
    }

    return { success: false, message: "‚ùå T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ƒë√≥ng bƒÉng." };

    // const rewards = code.use(player.getGlobalId());

    // // Ghi nh·∫≠n ƒë√£ s·ª≠ d·ª•ng tr√™n ng∆∞·ªùi ch∆°i
    // if (!Array.isArray(player.redeemedCodes)) player.redeemedCodes = [];
    // player.redeemedCodes.push(code.code);
  }
}

let instance = null;

export function getCodeServiceInstance() {
  if (!instance) {
    instance = new CodeService();
  }
  return instance;
}
