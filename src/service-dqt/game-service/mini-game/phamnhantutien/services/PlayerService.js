/**
 * PlayerService.js
 * Service x·ª≠ l√Ω c√°c thao t√°c li√™n quan ƒë·∫øn ng∆∞·ªùi ch∆°i
 */

import { getGameDataInstance } from "../core/GameData.js";
import { getGameManagerInstance } from "../core/GameManager.js";
import Player from "../models/Player.js";
import { findByIdOrNameFuzzy } from "../utils/TextSearch.js";
import { getServiceRegistry } from "./ServiceRegistry.js";
import { getPlayerRepositoryInstance } from "../repositories/PlayerRepository.js";

/**
 * Service x·ª≠ l√Ω c√°c thao t√°c li√™n quan ƒë·∫øn ng∆∞·ªùi ch∆°i
 * @class PlayerService
 */
export class PlayerService {
  constructor() {
    /** @type {import('../core/GameData.js').GameData} */
    this.gameData = getGameDataInstance();

    /** @type {import('../core/GameManager.js').GameManager} */
    this.gameManager = getGameManagerInstance();

    // C√°c service kh√°c s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ registry khi c·∫ßn
    this._registry = getServiceRegistry();
    
    /** @type {import('../repositories/PlayerRepository.js').PlayerRepository} */
    this.playerRepository = getPlayerRepositoryInstance();
  }

  /**
   * L·∫•y m·ªôt service t·ª´ registry
   * @param {string} serviceName - T√™n service
   * @returns {Object} Service instance
   */
  getService = (serviceName) => this._registry.getService(serviceName);

  /**
   * T·∫°o ng∆∞·ªùi ch∆°i m·ªõi
   * @param {Object} userData - Th√¥ng tin ng∆∞·ªùi d√πng
   * @returns {Player} - ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i m·ªõi
   */
  async createNewPlayer(userData) {
    if (!userData || !userData.globalId) {
      throw new Error("D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá");
    }

    const now = Date.now();

    const playerData = {
      globalId: userData.globalId,
      name: userData.zaloName || "Chi·∫øn binh v√¥ danh",
      lastActivity: now,
      createdAt: now,
      knownIds: [userData.id],
    };

    const player = new Player(playerData);
    
    // L∆∞u v√†o database
    await this.playerRepository.createPlayer(playerData);
    
    // C·∫≠p nh·∫≠t v√†o b·ªô nh·ªõ cache
    this.gameData.setPlayerData(userData.globalId, player);

    return player;
  }

  /**
   * Hi·ªÉn th·ªã th·ªëng k√™ ng∆∞·ªùi ch∆°i
   * @param {Player} player - ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i
   */
  handleStatsCommand(player) {
    let message = "üìä TH·ªêNG K√ä NH√ÇN V·∫¨T\n\n";
    message += `‚Ä¢ T√™n: ${player.getName()}\n`;
    message += `‚Ä¢ ${player.realm.getDisplayString()}\n`;
    message += `‚Ä¢ ${player.realm.getSpiritRootInfo()}\n`;
    message += `‚Ä¢ T·ªëc ƒë·ªô tu luy·ªán: x${player.realm.getCultivationSpeedMultiplier().toFixed(2)}\n`;

    return { success: true, message };
  }

  /**
   * T·∫°o ƒë·ªëi t∆∞·ª£ng Player t·ª´ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i c√≥ s·∫µn
   * @param {Object} rawPlayerData - D·ªØ li·ªáu ng∆∞·ªùi ch∆°i th√¥ t·ª´ gameData
   * @returns {Player|null} - ƒê·ªëi t∆∞·ª£ng Player m·ªõi ho·∫∑c null n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
   */
  createPlayer(rawPlayerData) {
    if (!rawPlayerData) return null;
    return new Player(rawPlayerData);
  }

  /**
   * L·∫•y ƒë·ªëi t∆∞·ª£ng Player t·ª´ playerId
   * @param {string} playerId - ID ng∆∞·ªùi ch∆°i
   * @returns {Player|null} - ƒê·ªëi t∆∞·ª£ng Player ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  getPlayerInstance(playerId) {
    return this.gameData.getPlayerByPlayerId(playerId);
  }

  /**
   * L·∫•y ƒë·ªëi t∆∞·ª£ng Player t·ª´ globalId
   * @param {string} globalId - Global ID ng∆∞·ªùi ch∆°i
   * @returns {Player|null} - ƒê·ªëi t∆∞·ª£ng Player ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
   */
  getPlayerInstanceByGlobalId(globalId) {
    return this.gameData.getPlayerByGlobalId(globalId);
  }

  /**
   * Ki·ªÉm tra v√† x·ª≠ l√Ω h·ªìi sinh n·∫øu ƒë√£ ƒë·ªß th·ªùi gian
   * @param {Player} player - ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi ch∆°i
   * @returns {Object} - K·∫øt qu·∫£ ki·ªÉm tra
   */
  checkRespawnStatus(player) {
    if (player.status !== "dead") {
      return { canRespawn: false, alreadyAlive: true };
    }

    const now = Date.now();
    if (!player.respawnTime || now >= player.respawnTime) {
      player.status = "online";
      player.respawnTime = null;
      player.save();

      return {
        canRespawn: true,
        alreadyAlive: false,
        message:
          "Sau khi t·ª≠ tr·∫≠n v√†o l·∫ßn tr∆∞·ªõc, th√¢n th·ªÉ ƒë√£ ƒë∆∞·ª£c t√°i t·∫°o v√† linh l·ª±c ƒë∆∞·ª£c ph·ª•c h·ªìi m·ªôt √≠t!\n" +
          "H√£y d√πng l·∫°i l·ªánh l√∫c n√£y b·∫°n v·ª´a d√πng ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh!",
      };
    }

    const remainingTime = Math.ceil((player.respawnTime - now) / 1000);
    return {
      canRespawn: false,
      alreadyAlive: false,
      remainingTime,
      message: `Th√¢n th·ªÉ tr·ªçng th∆∞∆°ng, kh√¥ng th·ªÉ l√†m g√¨ c·∫£!\nB·∫°n s·∫Ω ƒë∆∞·ª£c h·ªìi sinh sau ${remainingTime} gi√¢y n·ªØa.`,
    };
  }
}

let instance = null;

export function getPlayerServiceInstance() {
  if (!instance) {
    instance = new PlayerService();
  }
  return instance;
}
