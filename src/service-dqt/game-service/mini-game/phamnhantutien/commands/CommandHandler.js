/**
 * CommandHandler.js
 * L·ªõp x·ª≠ l√Ω c√°c l·ªánh t·ª´ ng∆∞·ªùi ch∆°i
 */

import { getGameDataInstance } from "../core/GameData.js";
import { getGameManagerInstance } from "../core/GameManager.js";
import { removeMention } from "../../../../../utils/format-util.js";
import { sendMessageComplete, sendMessageFromSQL } from "../../../../chat-zalo/chat-style/chat-style.js";
import { getGlobalPrefix } from "../../../../service.js";
import { getUserInfoBasic } from "../../../../info-service/user-info.js";
import { addGame, addPlayer, getActiveGames } from "../../index.js";
import { getServiceRegistry } from "../services/ServiceRegistry.js";

/**
 * L·ªõp x·ª≠ l√Ω c√°c l·ªánh t·ª´ ng∆∞·ªùi ch∆°i
 * @class CommandHandler
 */
export class CommandHandler {
  constructor() {
    /** @type {import('../core/GameData.js').GameData} */
    this.gameData = getGameDataInstance();
    /** @type {import('../core/GameManager.js').GameManager} */
    this.gameManager = getGameManagerInstance();
    this.gameManager.setCommandHandler(this);
    this._registry = getServiceRegistry();

    this.VALID_COMMANDS = ["help", "stats", "code"];
  }

  /**
   * L·∫•y m·ªôt service t·ª´ registry
   * @param {string} serviceName - T√™n service
   * @returns {Object} Service instance
   */
  getService = (serviceName) => this._registry.getService(serviceName);

  /**
   *@returns {import('../services/PlayerService.js').PlayerService}
   */
  get playerService() {
    return this.getService("PlayerService");
  }

  /**
   * @returns {import('../services/CodeService.js').CodeService}
   */
  get codeService() {
    return this.getService("CodeService");
  }

  /**
   * Hi·ªÉn th·ªã danh s√°ch l·ªánh h·ªó tr·ª£
   * @param {Array} args - Tham s·ªë l·ªánh
   * @returns {Object} K·∫øt qu·∫£ x·ª≠ l√Ω
   */
  handleHelpCommand(args = []) {
    // Danh s√°ch c√°c lo·∫°i l·ªánh
    const commandTypes = {
      general: {
        title: "üìã L·ªÜNH CHUNG",
        commands: [
          { name: "help", desc: "Hi·ªÉn th·ªã danh s√°ch l·ªánh" },
          { name: "stats", desc: "Xem t·ªïng th·ªÉ chi ti·∫øt nh√¢n v·∫≠t" },
          { name: "code [m√£ code]", desc: "S·ª≠ d·ª•ng m√£ code" },
        ],
      }
    };

    // N·∫øu c√≥ tham s·ªë, hi·ªÉn th·ªã tr·ª£ gi√∫p cho lo·∫°i l·ªánh c·ª• th·ªÉ
    if (args.length > 0) {
      const category = args[0].toLowerCase();
      if (commandTypes[category]) {
        let helpText = `${commandTypes[category].title}\n\n`;
        for (const cmd of commandTypes[category].commands) {
          helpText += `‚Ä¢ ${cmd.name}: ${cmd.desc}\n`;
        }

        return {
          success: true,
          message: helpText,
        };
      }
    }

    // Hi·ªÉn th·ªã t·ªïng quan c√°c lo·∫°i l·ªánh
    let helpText = "üåü DANH S√ÅCH L·ªÜNH PH√ÄM NH√ÇN TU TI√äN üåü\n\n";
    helpText += "S·ª≠ d·ª•ng `help [lo·∫°i]` ƒë·ªÉ xem chi ti·∫øt t·ª´ng lo·∫°i l·ªánh.\n\n";

    for (const category in commandTypes) {
      helpText += `${commandTypes[category].title} [${category}]:\n`;
      const maxCommands = Math.min(5, commandTypes[category].commands.length);
      for (let i = 0; i < maxCommands; i++) {
        const cmd = commandTypes[category].commands[i];
        helpText += `‚Ä¢ ${cmd.name}: ${cmd.desc}\n`;
      }
      if (maxCommands < commandTypes[category].commands.length) {
        helpText += `... v√† ${commandTypes[category].commands.length - maxCommands} l·ªánh kh√°c\n\n`;
      } else {
        helpText += "\n";
      }
    }

    helpText += "üìñ C√°c lo·∫°i tr·ª£ gi√∫p kh√°c:\n";
    helpText += "‚Ä¢ help pills: Xem th√¥ng tin v·ªÅ c√°c lo·∫°i ƒëan d∆∞·ª£c\n";

    return {
      success: true,
      message: helpText,
    };
  }

  /**
   * G·ª≠i tin nh·∫Øn k·∫øt qu·∫£
   * @param {Object} api - API object
   * @param {Object} message - Message object
   * @param {Object} result - Result object with success and message properties
   */
  async sendMessageWithResult(api, message, result) {
    if (typeof result === "string") {
      result = {
        success: true,
        message: result,
      };
    }
    await sendMessageFromSQL(api, message, result, false, this.gameManager.TIME_TO_LIVE);
  }

  /**
   * X·ª≠ l√Ω l·ªánh game t·ª´ ng∆∞·ªùi ch∆°i
   * @param {Object} api - API object
   * @param {Object} message - Message object
   * @param {string} command - L·ªánh ƒë∆∞·ª£c g·ª≠i
   * @param {Array} args - C√°c tham s·ªë c·ªßa l·ªánh
   * @returns {Promise<Object>} - K·∫øt qu·∫£ x·ª≠ l√Ω l·ªánh
   */
  async handleGameCommand(api, message, command, args) {
    const playerId = message.data.uidFrom;

    const player = this.playerService.getPlayerInstance(playerId);

    if (!player) {
      return {
        success: false,
        message: "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i!",
      };
    }

    player.lastActivity = Date.now();
    player.save();

    if (player.status === "dead") {
      const respawnStatus = this.playerService.checkRespawnStatus(player);
      if (respawnStatus.canRespawn) {
        return { success: true, message: respawnStatus.message };
      } else {
        return { success: true, message: respawnStatus.message };
      }
    }

    switch (command.toLowerCase()) {
      case "help":
        return this.handleHelpCommand(args);

      case "stats":
        return this.playerService.handleStatsCommand(player);

      case "code":
        return await this.codeService.handleCode(player, args.join(" "));

      default:
        return {
          success: false,
          message: "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `help` ƒë·ªÉ xem danh s√°ch l·ªánh.",
        };
    }
  }

  /**
   * X·ª≠ l√Ω message t·ª´ ng∆∞·ªùi ch∆°i
   * @param {Object} api - API object
   * @param {Object} message - Message object
   */
  async handleMessage(api, message) {
    const playerId = message.data.uidFrom;

    const globalState = this.gameManager.getGlobalState();

    if (!globalState.has(playerId)) return false;

    this.gameManager.setPlayerState(playerId);

    const content = removeMention(message);

    if (content.toLowerCase() === "leave") {
      const result = await this.handleLeaveGame(api, message);
      await this.sendMessageWithResult(api, message, result);
      return true;
    }

    const parts = content.split(/\s+/);
    const command = parts[0].toLowerCase();
    const args = parts.slice(1);

    if (!this.VALID_COMMANDS.includes(command)) {
      return false;
    }

    try {
      const result = await this.handleGameCommand(api, message, command, args);
      await this.sendMessageWithResult(api, message, result);
      return true;
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω l·ªánh game:", error);
      await this.sendMessageWithResult(api, message, {
        success: false,
        message: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh game!",
      });
      return false;
    }
  }

  /**
   * X·ª≠ l√Ω l·ªánh tham gia game
   * @param {Object} api - API object
   * @param {Object} message - Message object
   */
  async handleJoinGame(api, message) {
    const threadId = message.threadId;
    const playerId = message.data.uidFrom;
    const zaloName = message.data.dName;
    let player = null;
    let isCreate = false;

    if (!this.gameManager.isPlayerInGame(playerId)) {
      const userData = await getUserInfoBasic(api, playerId);
      const globalId = userData.globalId;

      const rawPlayerData = this.gameData.getPlayerByGlobalId(globalId);

      if (!rawPlayerData) {
        player = this.playerService.createNewPlayer(userData);
        isCreate = true;
      } else {
        player = this.playerService.createPlayer(rawPlayerData);
        if (!player.knownIds.includes(playerId)) {
          player.knownIds.push(playerId);
          player.save();
        }
      }

      const complete = this.gameManager.addPlayerToGame({ playerId, globalId });

      if (!complete) {
        await sendMessageComplete(api, message, "‚ùå ƒê√£ x·∫£y ra l·ªói khi th√™m ng∆∞·ªùi ch∆°i v√†o game!", false);
        return;
      }
    } else {
      player = this.gameManager.getPlayerFromId(playerId);
    }

    addPlayer(threadId, this.gameManager.gameType, playerId, zaloName);

    let welcomeMsg = `‚Ä¢ Nh√¢n V·∫≠t: ${player.getName()}\n`;
    welcomeMsg += `‚Ä¢ ${player.realm.getDisplayString()}\n\n`;
    welcomeMsg +=
      `üéÆ Ch√†o m·ª´ng ƒë√£ ${isCreate ? "ƒë·∫øn" : "tr·ªü l·∫°i"} v·ªõi h·ªá th·ªëng game ${this.gameManager.gameType}!` +
      `\n\n‚Ä¢ Nh·∫≠p 'help' ƒë·ªÉ xem danh s√°ch l·ªánh v√† 'quest' ƒë·ªÉ xem nhi·ªám v·ª•.`;

    await sendMessageComplete(api, message, welcomeMsg, false, this.gameManager.TIME_TO_LIVE);
  }

  /**
   * X·ª≠ l√Ω l·ªánh r·ªùi game
   * @param {Object} api - API object
   * @param {Object} message - Message object
   */
  async handleLeaveGame(api, message) {
    const playerId = message.data.uidFrom;
    const threadId = message.threadId;

    if (!this.gameManager.isPlayerInGame(playerId)) {
      await sendMessageComplete(api, message, `‚ùå B·∫°n ch∆∞a tham gia game ${this.gameManager.gameType}!`);
      return;
    }

    this.gameManager.removePlayerFromGame({ playerId, threadId });

    await sendMessageComplete(api, message, `üëã B·∫°n ƒë√£ r·ªùi kh·ªèi game ${this.gameManager.gameType}. H·∫πn g·∫∑p l·∫°i sau!`);
  }

  /**
   * X·ª≠ l√Ω l·ªánh game phamnhantutien
   * @param {Object} api - API object
   * @param {Object} message - Message object
   * @param {string} aliasCommand - L·ªánh alias
   */
  async handlePhamNhanTuTienCommand(api, message, aliasCommand) {
    const botId = api.getBotId();
    const prefix = getGlobalPrefix(botId);
    const content = removeMention(message);
    const command = content.replace(prefix, "").replace(aliasCommand, "").trim();
    const threadId = message.threadId;

    const activeGames = getActiveGames();
    if (!activeGames.has(threadId)) addGame(threadId, this.gameManager.gameType, this.gameManager.getGlobalState());
    let threadGames = activeGames.get(threadId);
    if (!threadGames.has(this.gameManager.gameType))
      addGame(threadId, this.gameManager.gameType, this.gameManager.getGlobalState());

    switch (command) {
      case "join":
        await this.handleJoinGame(api, message);
        break;
      case "leave":
        await this.handleLeaveGame(api, message);
        break;
      default:
        await sendMessageComplete(
          api,
          message,
          "üìú Ph√†m Nh√¢n Tu Ti√™n üìú\n\n" +
            ` > Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng game Tu Ti√™n Nh·∫≠p Vai (RPG) D√≤ng L·ªánh (CLI)\n` +
            `${aliasCommand} join: Tham gia game\n` +
            `${aliasCommand} leave: R·ªùi kh·ªèi game\n` +
            `Sau khi tham gia game, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh game tr·ª±c ti·∫øp.\n` +
            `Khi ƒë√≥ c√≥ th·ªÉ g√µ 'help' ƒë·ªÉ xem danh s√°ch l·ªánh trong game.`
        );
        break;
    }
  }
}

let instance = null;

export function getCommandHandlerInstance() {
  if (!instance) {
    instance = new CommandHandler();
  }
  return instance;
}
